{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","useState","title","setTitle","error","setError","addTask","trim","todoListId","onClick","removeBloque","className","value","onChange","e","currentTarget","onKeyPress","charCode","tasks","map","t","key","id","isDone","type","changeTaskStatus","checked","removeTask","filter","changeFilter","todoListId1","v1","todoListId2","App","todoList","setTodoList","setTasks","el","taskId","newTask","changeStatus","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.840b51f3.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport './App.css';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    todoListId:string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (todoListId:string,taskId: string) => void\r\n    changeFilter: (todoListId:string,value: FilterValuesType) => void\r\n    addTask: (todoListId:string,title: string) => void\r\n    changeTaskStatus: (todoListId:string,taskId: string, isDone: boolean) => void\r\n    filter: FilterValuesType\r\n    removeBloque:(todoListId:string)=>void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addTask(props.todoListId,title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    function onKeyPressHandler(e: KeyboardEvent<HTMLInputElement>) {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(props.todoListId,\"all\");\r\n    const onActiveClickHandler = () => props.changeFilter(props.todoListId,\"active\");\r\n    const onCompletedClickHandler = () => props.changeFilter(props.todoListId,\"completed\");\r\n    const removeBloqueHandler = () => props.removeBloque(props.todoListId)\r\n\r\n\r\n    return <div>\r\n        <button onClick={removeBloqueHandler} className=\"button_edit\">Edit</button>\r\n        <h3>\r\n        \r\n            {props.title}</h3>\r\n     \r\n        <div>\r\n            <input value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? \"error\" : \"\"}\r\n            />\r\n            <button onClick={addTask}>+</button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(props.todoListId,t.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeTaskStatus(props.todoListId,t.id, e.currentTarget.checked);\r\n                    }\r\n\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <input type=\"checkbox\"\r\n                               onChange={onChangeHandler}\r\n                               checked={t.isDone}/>\r\n                        <span>{t.title}</span>\r\n                        <button onClick={onClickHandler}>x</button>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <button className={props.filter === 'all' ? \"active-filter\" : \"\"}\r\n                    onClick={onAllClickHandler}>All</button>\r\n\r\n            <button className={props.filter === 'active' ? \"active-filter\" : \"\"}\r\n                onClick={onActiveClickHandler}>Active</button>\r\n\r\n            <button className={props.filter === 'completed' ? \"active-filter\" : \"\"}\r\n                onClick={onCompletedClickHandler}>Completed</button>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\ntype TodoListType={\r\n id:string \r\n title:string \r\n filter: FilterValuesType\r\n}\r\n\r\ntype TasksType={\r\n    [key:string]:Array<TaskType>\r\n}\r\n\r\n let todoListId1=v1(); \r\n let todoListId2=v1();\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n   \r\n\r\n    let [todoList,setTodoList]=useState<Array<TodoListType>>([\r\n        {id:todoListId1,title:\"What to learn\",filter:\"all\"},\r\n        {id:todoListId2,title:\"What to buy\",filter:\"completed\"},\r\n       \r\n    ])\r\n\r\n\r\n    let [tasks, setTasks] = useState<TasksType>({\r\n\r\n        [todoListId1]: [\r\n            { id: v1(), title: \"HTML&CSS\", isDone: true },\r\n            { id: v1(), title: \"JS\", isDone: true },\r\n            { id: v1(), title: \"ReactJS\", isDone: false },\r\n            { id: v1(), title: \"Rest API\", isDone: false },\r\n            { id: v1(), title: \"GraphQL\", isDone: false },\r\n        ],\r\n\r\n        [todoListId2]: [\r\n            { id: v1(), title: \"HTML&CSS\", isDone: true },\r\n            { id: v1(), title: \"JS\", isDone: true },\r\n            { id: v1(), title: \"ReactJS\", isDone: false },\r\n            { id: v1(), title: \"Rest API\", isDone: false },\r\n            { id: v1(), title: \"GraphQL\", isDone: false },\r\n        ]\r\n    });\r\n\r\n\r\n    const removeBloque = (todoListId:string) => {\r\n        \r\n        setTodoList(todoList.filter(el=>el.id !== todoListId))\r\n        delete tasks[todoListId]\r\n    }\r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n    function removeTask(todoListId:string, taskId: string) {\r\n        \r\n        setTasks({...tasks,[todoListId]:tasks[todoListId].filter(el=>el.id !== taskId)})\r\n\r\n    }\r\n\r\n    \r\n   \r\n\r\n    function addTask(todoListId: string, title: string): void {\r\n\r\n        let newTask = { id: v1(), title: title, isDone: false };\r\n        setTasks({ ...tasks, [todoListId]:[newTask,...tasks[todoListId]]})\r\n    }\r\n\r\n\r\n\r\n    function changeStatus(todoListId:string, taskId: string, isDone: boolean) {\r\n        setTasks({...tasks,[todoListId]:tasks[todoListId].map(el=>el.id===taskId ? {...el,isDone}: el)})\r\n    }\r\n\r\n\r\n\r\n    function changeFilter(todoListId:string, value: FilterValuesType): void {\r\n       setTodoList ( todoList.map ( el=>  el.id===todoListId ? { ...el, filter:value } : el ))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {todoList.map((el)=>{\r\n\r\n                   let tasksForTodolist = tasks[el.id];\r\n\r\n                  if (el.filter === \"active\") {\r\n                    tasksForTodolist = tasks[el.id].filter(t => t.isDone === false);\r\n                }\r\n                if (el.filter === \"completed\") {\r\n                    tasksForTodolist = tasks[el.id].filter(t => t.isDone === true);\r\n                }\r\n\r\n                return(\r\n                    <Todolist\r\n                    key={el.id}\r\n                    todoListId={el.id}\r\n                    title={el.title}\r\n                    tasks={tasksForTodolist}\r\n                    removeTask={removeTask}\r\n                    changeFilter={changeFilter}\r\n                    addTask={addTask}\r\n                    changeTaskStatus={changeStatus}\r\n                    filter={el.filter}\r\n                    removeBloque={removeBloque}\r\n                    />\r\n                )\r\n            }\r\n            )}\r\n        \r\n            {/* <Todolist title=\"What to learn\"\r\n                      tasks={tasksForTodolist}\r\n                      removeTask={removeTask}\r\n                      changeFilter={changeFilter}\r\n                      addTask={addTask}\r\n                      changeTaskStatus={changeStatus}\r\n                      filter={filter}\r\n            /> */}\r\n            \r\n          \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}